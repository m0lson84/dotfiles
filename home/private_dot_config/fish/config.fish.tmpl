{{- /* Additional paths */ -}}
{{- $paths := list "$HOME/.local/bin" "/usr/local/bin" -}}
{{- if not .env.ephemeral -}}
  {{- $paths = concat $paths ( list
    "$HOME/.local/share/bob/nvim-bin"
    "$HOME/.local/share/mise/shims"
    "$HOME/.pub-cache/bin"
    "$HOME/flutter/bin" )
  -}}
{{- end -}}
{{- if eq .env.os "darwin" -}}
  {{- $paths = concat $paths ( list
    "/opt/homebrew/opt/libpq/bin"
    "/usr/local/opt/openssl@1.1/bin"
    "/usr/local/opt/python@3.10/bin"
    "/usr/local/sbin" )
  -}}
{{- end -}}


#  ______ _     _
#  |  ___(_)   | |
#  | |_   _ ___| |__
#  |  _| | / __| '_ \
#  | |   | \__ \ | | |
#  \_|   |_|___/_| |_|
#
#


# XDG Base Directory Specification
set -x XDG_CACHE_HOME "$HOME/.cache"
set -x XDG_CONFIG_HOME "$HOME/.config"
set -x XDG_DATA_HOME "$HOME/.local/share"

# Enable VI key bindings
set -g fish_key_bindings fish_vi_key_bindings

# Disable greeting
set -g fish_greeting

# Additional paths
{{- range ( $paths | sortAlpha | uniq ) }}
fish_add_path --append --path {{ . }}
{{- end }}

# Default shell
set -x SHELL "fish"

{{- if not .env.ephemeral }}

# Default Apps
set -x BROWSER {{ .default.browser | quote }}
set -x EDITOR {{ .default.editor | quote }}
set -x TERMINAL {{ .default.terminal | quote }}
set -x VISUAL {{ .default.editor | quote }}

{{- end }}

# AWS SDK config
set -x AWS_SDK_LOAD_CONFIG 1

# bat configuration
set -x BAT_CONFIG_PATH "$XDG_CONFIG_HOME/bat/config.conf"

{{- if eq .env.distro "arch" }}

# Chrome configuration
set -x CHROME_EXECUTABLE "$( which google-chrome-stable )"

{{- end }}

# fzf configuration
if type -q fzf
    fzf --fish | source
end

# Homebrew configuration
set -l HOMEBREW_PREFIX (command -v brew >/dev/null; and brew --prefix; or echo /opt/homebrew)
if test -f "$HOMEBREW_PREFIX/bin/brew"
    eval ($HOMEBREW_PREFIX/bin/brew shellenv)
end

# mise-en-place configuration
set -gx MISE_ENV_FILE ".env"
set -gx MISE_NODE_DEFAULT_PACKAGES_FILE "$XDG_CONFIG_HOME/mise/nodejs"
if type -q mise
    mise activate fish | source
end

{{- if not .env.ephemeral }}

# OpenSSL configuration
export CONFIGURE_OPTS="-with-openssl=$(which openssl)"

{{- end }}

{{- if eq .env.os "darwin" }}

# OrbStack: command-line tools and integration
source "$HOME/.orbstack/shell/init.fish" 2>/dev/null || :

{{- end }}

# Poetry configuration
set -x POETRY_HOME "$HOME/.local/share/pypoetry"

# Rust configuration
if test -f "$HOME/.cargo/env"
    set fish_user_paths "$HOME/.cargo/bin"
end

# Starship initialization
set -gx STARSHIP_CONFIG "$XDG_CONFIG_HOME"/starship/starship.toml
if type -q starship
    starship init fish | source
end

# zoxide configuration
if type -q zoxide
    zoxide init --cmd cd  fish | source
end
